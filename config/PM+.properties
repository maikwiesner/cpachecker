# predicate model checking with refinement to generate and 
# extract requirements on custom instruction

# general options
output.disable = true
limits.time.cpu = 900

specification = specification/default.spc

# configuration of extraction
analysis.extractRequirements.customInstruction = true
custominstructions.requirementsStateClassName=org.sosy_lab.cpachecker.cpa.predicate.PredicateAbstractState

# need to set the following options externally
# custominstructions.definitionFile (input ci.txt file)

# configuration of analysis

solver.solver = MATHSAT5

cpa.predicate.blk.alwaysAtExplicitNodes = true
cpa.predicate.blk.alwaysAtFunctions = false
cpa.predicate.blk.alwaysAtLoops     = true

cegar.refiner = cpa.predicate.PredicateRefiner
cpa.predicate.refinement.performInitialStaticRefinement = true
analysis.algorithm.CEGAR = true

# ARGCPA is necessary for refinement and has to be the top-level CPA
cpa = cpa.arg.ARGCPA
ARGCPA.cpa = cpa.composite.CompositeCPA
CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.functionpointer.FunctionPointerCPA, cpa.predicate.PredicateCPA

cpa.composite.aggregateBasicBlocks = false

# This three options are the necessary options to make the PredicateCPA use linear approximation. Uncomment them to get linear analysis.
 cpa.predicate.encodeBitvectorAs = INTEGER
 cpa.predicate.encodeFloatAs = RATIONAL
 cpa.predicate.handleFieldAccess = false

[analysis.traversal]
order = bfs
useReversePostorder = true
useCallstack = true
